#!/bin/bash
# shellcheck disable=SC2206
# THIS FILE IS GENERATED BY AUTOMATION SCRIPT! PLEASE REFER TO ORIGINAL SCRIPT!
# THIS FILE IS MODIFIED AUTOMATICALLY FROM TEMPLATE AND SHOULD BE RUNNABLE!
#SBATCH --partition=volta
#SBATCH --job-name=10_multiclass_LP_42_Supervised_random_0106-2349
#SBATCH --output=10_multiclass_LP_42_Supervised_random_0106-2349.log
#SBATCH -w aap04
### This script works for any number of nodes, Ray will find and manage all resources
#SBATCH --nodes=1
#SBATCH --exclusive
### Give all resources to a single Ray task, ray can manage the resources internally
#SBATCH --ntasks-per-node=1
# #SBATCH --gpus-per-task=4    # <------ ANDRES
#SBATCH --gpus-per-node=4      # <------ ANDRES
#SBATCH --time=12:00:00                           # <------ ANDRES                        # 32 FOR RAY TUNE!!
# #SBATCH --exclude=aap[01-02]                      # <------ ANDRES

# Load modules or your own conda environment here
# module load pytorch/v1.4.0-gpu
# ssl-bsu-conda

# Turgalium.
source ~/anaconda3/etc/profile.d/conda.sh         # <------ ANDRES
conda activate ssl-bsu-conda

# NGPU.UGR
# export PATH="/opt/anaconda/anaconda3/bin:$PATH"   # <------ ANDRES
# export PATH="/opt/anaconda/bin:$PATH"
# eval "$(conda shell.bash hook)"
# conda activate /mnt/homeGPU/asanchez/ssl-bsu-conda
# export TFHUB_CACHE_DIR=.

# ===== DO NOT CHANGE THINGS HERE UNLESS YOU KNOW WHAT YOU ARE DOING =====
# This script is a modification to the implementation suggest by gregSchwartz18 here:
# https://github.com/ray-project/ray/issues/826#issuecomment-522116599
redis_password=$(uuidgen)
export redis_password

nodes=$(scontrol show hostnames "$SLURM_JOB_NODELIST") # Getting the node names
nodes_array=($nodes)

node_1=${nodes_array[0]}
ip=$(srun --nodes=1 --ntasks=1 -w "$node_1" hostname --ip-address) # making redis-address

# if we detect a space character in the head node IP, we'll
# convert it to an ipv4 address. This step is optional.
if [[ "$ip" == *" "* ]]; then
  IFS=' ' read -ra ADDR <<< "$ip"
  if [[ ${#ADDR[0]} -gt 16 ]]; then
    ip=${ADDR[1]}
  else
    ip=${ADDR[0]}
  fi
  echo "IPV6 address detected. We split the IPV4 address as $ip"
fi

port=6379
ip_head=$ip:$port
export ip_head
echo "IP Head: $ip_head"

echo "STARTING HEAD at $node_1"
srun --nodes=1 --ntasks=1 -w "$node_1" \
  ray start --head --node-ip-address="$ip" --port=$port --redis-password="$redis_password" --block &
sleep 30

worker_num=$((SLURM_JOB_NUM_NODES - 1)) #number of nodes other than the head node
for ((i = 1; i <= worker_num; i++)); do
  node_i=${nodes_array[$i]}
  echo "STARTING WORKER $i at $node_i"
  srun --nodes=1 --ntasks=1 -w "$node_i" ray start --address "$ip_head" --redis-password="$redis_password" --block &
  sleep 5
done

# ===== Call your code below =====
torchrun finetuning.py Supervised multiclass -bn resnet18 -tr 10 -e 100 -lr 0.01 -se 5 -bs 32 -nw 4 -iw random -tl LP -s 42 --ray_tune=gridsearch --grace_period=75 --num_samples_trials=1 --gpus_per_trial=1